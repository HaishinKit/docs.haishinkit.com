{"kind":"symbol","primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This module supports the SRT protocol. It is separated into its own module due to the large size of the wrapper library for libsrt."}]},{"text":"libsrt.xcframework","type":"heading","level":2,"anchor":"libsrtxcframework"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"This is a build of https:\/\/github.com\/Haivision\/srt as an xcframework.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The license under the MPLv2.0."}]}]}]},{"level":2,"type":"heading","anchor":"%F0%9F%93%93-Usage","text":"ðŸ““ Usage"},{"level":3,"type":"heading","text":"Ingest","anchor":"Ingest"},{"syntax":"swift","type":"codeListing","code":["let mixer = MediaMixer()","let connection = SRTConnection()","let stream = SRTStream(connection: connection)","let hkView = MTHKView(frame: view.bounds)","","Task {","  do {","    try await mixer.attachAudio(AVCaptureDevice.default(for: .audio))","  } catch {","    print(error)","  }","","  do {","    try await mixer.attachVideo(AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back))","  } catch {","    print(error)","  }","","  await mixer.addOutput(stream)","}","","Task { MainActor in","  await stream.addOutput(hkView)","  \/\/ add ViewController#view","  view.addSubview(hkView)","}","","Task {","  stream.attachAudioPlayer(audioPlayer)","  do {","    try await connection.connect(\"srt:\/\/host:port?option=foo\")","    try await stream.publish()","  } catch {","    print(error)","  }","}"]},{"text":"Playback","level":3,"anchor":"Playback","type":"heading"},{"syntax":"swift","type":"codeListing","code":["let connection = SRTConnection()","let stream = SRTStream(connection: connection)","let hkView = MTHKView(frame: view.bounds)","let audioPlayer = AudioPlayer(AVAudioEngine())","","Task { MainActor in","  await stream.addOutput(hkView)","  \/\/ add ViewController#view","  view.addSubview(hkView)","}","","Task {","  \/\/ requires attachAudioPlayer","  await stream.attachAudioPlayer(audioPlayer)","","  do {","    try await connection.connect(\"srt:\/\/host:port?option=foo\")","    try await stream.play()","  } catch {","    print(error)","  }","}"]},{"level":2,"text":"Test","anchor":"Test","type":"heading"},{"anchor":"ffplay-as-a-SRT-service-for-ingest-HaishinKit","text":"ffplay as a SRT service for ingest HaishinKit.","type":"heading","level":3},{"code":["$ ffplay -i 'srt:\/\/${YOUR_IP_ADDRESS}?mode=listener'"],"type":"codeListing","syntax":"sh"},{"anchor":"ffmpeg-as-a-SRT-service-for-playback-HaishinKit","text":"ffmpeg as a SRT service for playback HaishinKit.","level":3,"type":"heading"},{"syntax":"sh","type":"codeListing","code":["$ ffmpeg -stream_loop -1 -re -i input.mp4 -c copy -f mpegts 'srt:\/\/0.0.0.0:9998?mode=listener'"]}],"kind":"content"}],"topicSections":[{"title":"Classes","generated":true,"anchor":"Classes","identifiers":["doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTConnection","doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTStream"]},{"identifiers":["doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTLogger","doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTPerformanceData"],"title":"Structures","generated":true,"anchor":"Structures"},{"title":"Enumerations","anchor":"Enumerations","generated":true,"identifiers":["doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTLogFunctionalArea","doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTLogLevel","doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTMode"]}],"identifier":{"url":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/srthaishinkit"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"symbolKind":"module","roleHeading":"Framework","modules":[{"name":"SRTHaishinKit"}],"role":"collection","title":"SRTHaishinKit","externalID":"SRTHaishinKit"},"hierarchy":{"paths":[[]]},"references":{"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTPerformanceData":{"kind":"symbol","url":"\/documentation\/srthaishinkit\/srtperformancedata","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTPerformanceData","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SRTPerformanceData","kind":"identifier"}],"navigatorTitle":[{"text":"SRTPerformanceData","kind":"identifier"}],"abstract":[{"type":"text","text":"The SRTPerformanceData represents the SRTâ€™s performance statistics. This struct is wrapper for an CBytePerfMon."}],"type":"topic","title":"SRTPerformanceData","role":"symbol"},"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTConnection":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SRTConnection"}],"identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTConnection","abstract":[{"type":"text","text":"An actor that provides the interface to control a two-way SRT connection."}],"navigatorTitle":[{"text":"SRTConnection","kind":"identifier"}],"url":"\/documentation\/srthaishinkit\/srtconnection","title":"SRTConnection","type":"topic"},"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTLogger":{"type":"topic","url":"\/documentation\/srthaishinkit\/srtlogger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SRTLogger"}],"kind":"symbol","title":"SRTLogger","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTLogger","role":"symbol","abstract":[{"text":"An object for writing interpolated string messages to srt logging system.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SRTLogger"}]},"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTLogLevel":{"url":"\/documentation\/srthaishinkit\/srtloglevel","title":"SRTLogLevel","abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTLogLevel","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SRTLogLevel"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SRTLogLevel","kind":"identifier"}]},"doc://SRTHaishinKit/documentation/SRTHaishinKit":{"abstract":[],"role":"collection","url":"\/documentation\/srthaishinkit","type":"topic","kind":"symbol","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit","title":"SRTHaishinKit"},"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTLogFunctionalArea":{"abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SRTLogFunctionalArea","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SRTLogFunctionalArea"}],"url":"\/documentation\/srthaishinkit\/srtlogfunctionalarea","role":"symbol","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTLogFunctionalArea","title":"SRTLogFunctionalArea","type":"topic"},"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTStream":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SRTStream"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"An actor that provides the interface to control a one-way channel over a SRTConnection."}],"url":"\/documentation\/srthaishinkit\/srtstream","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"SRTStream","kind":"identifier"}],"title":"SRTStream","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTStream"},"doc://SRTHaishinKit/documentation/SRTHaishinKit/SRTMode":{"type":"topic","title":"SRTMode","navigatorTitle":[{"kind":"identifier","text":"SRTMode"}],"abstract":[{"type":"text","text":"The type of SRTHaishinKit supports srt modes."}],"url":"\/documentation\/srthaishinkit\/srtmode","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SRTMode"}],"kind":"symbol","identifier":"doc:\/\/SRTHaishinKit\/documentation\/SRTHaishinKit\/SRTMode"}}}